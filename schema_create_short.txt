CREATE SCHEMA SENIORE;

CREATE TABLE SENIORE.DEMAND_OFFER ( 
	ID                   integer NOT NULL  ,
	"TYPE"               varchar(100) NOT NULL  ,
	CONSTRAINT PK_OFFER_DEMAND_ID PRIMARY KEY ( ID )
 );

ALTER TABLE SENIORE.DEMAND_OFFER SET COMMENT = 'For user to choose whether he/she needs / offers a service. One user can have both roles on various services.';

ALTER TABLE SENIORE.DEMAND_OFFER MODIFY "TYPE" COMMENT = 'offer or demand';

CREATE TABLE SENIORE.REQUESTS_STATUS ( 
	ID                   integer NOT NULL  ,
	STATUS               varchar(500) NOT NULL  ,
	CONSTRAINT PK_REQUEST_STATUS_ID PRIMARY KEY ( ID )
 );

ALTER TABLE SENIORE.REQUESTS_STATUS SET COMMENT = 'Status of request - waiting for response, accepted, matched.';

CREATE TABLE SENIORE.SERVICES ( 
	ID                   integer NOT NULL  ,
	"TYPE"               varchar(100) NOT NULL  ,
	CONSTRAINT PK_SERVICES_ID PRIMARY KEY ( ID )
 );

ALTER TABLE SENIORE.SERVICES SET COMMENT = 'List of services that can be provided / offered.';

ALTER TABLE SENIORE.SERVICES MODIFY "TYPE" COMMENT = 'Cooking, chess playing, ....';

CREATE TABLE SENIORE."USERS" ( 
	ID                   integer NOT NULL  ,
	FIRST_NAME           varchar(100) NOT NULL  ,
	SURNAME              varchar(100) NOT NULL  ,
	EMAIL                varchar(100) NOT NULL  ,
	PASSWORD             varchar(20) NOT NULL  ,
	TELEPHONE            varchar(20) NOT NULL  ,
	ADDRESS              varchar(100) NOT NULL  ,
	CONSTRAINT PK_TABLE_ID PRIMARY KEY ( ID ),
	CONSTRAINT UNQ_USERS_ADDRESS UNIQUE ( ADDRESS )
 );

ALTER TABLE SENIORE."USERS" SET COMMENT = 'It contains general info about all users of the application.';

CREATE TABLE SENIORE.USERS_SERVICES ( 
	ID                   integer NOT NULL  ,
	ID_USERS             integer NOT NULL  ,
	ID_SERVICES          integer NOT NULL  ,
	ID_DEMAND_OFFER      integer NOT NULL  ,
	CONSTRAINT PK_USERS_SERVICES_ID PRIMARY KEY ( ID )
 );

ALTER TABLE SENIORE.USERS_SERVICES SET COMMENT = 'Pairing table for specific user / services / service type. Serves for finding users match.';

CREATE TABLE SENIORE.REQUESTS ( 
	ID                   integer NOT NULL  ,
	ID_USER_DEMAND       integer   ,
	ID_USERS_OFFER       integer NOT NULL  ,
	ID_SERVICES          integer   ,
	TIMESTAMP            timestamp NOT NULL  ,
	DATE_TIME            datetime NOT NULL  ,
	ADD_INFORMATION      varchar(500)   ,
	ID_REQUESTS_STATUS   integer   ,
	CONSTRAINT PK_REQUESTS_ID PRIMARY KEY ( ID )
 );

ALTER TABLE SENIORE.REQUESTS SET COMMENT = 'Specific request of service of one user towards another. Users can have more requests.';

ALTER TABLE SENIORE.REQUESTS MODIFY TIMESTAMP COMMENT = 'Time of creation / change of request.';

ALTER TABLE SENIORE.REQUESTS MODIFY DATE_TIME COMMENT = 'Date and time of meeting.';

ALTER TABLE SENIORE.REQUESTS MODIFY ADD_INFORMATION COMMENT = 'Possibility to add text info.';

ALTER TABLE SENIORE.REQUESTS ADD CONSTRAINT FK_USERS_DEMAND FOREIGN KEY ( ID_USER_DEMAND ) REFERENCES SENIORE."USERS"( ID ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE SENIORE.REQUESTS ADD CONSTRAINT FK_USERS_OFFER FOREIGN KEY ( ID_USERS_OFFER ) REFERENCES SENIORE."USERS"( ID ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE SENIORE.REQUESTS ADD CONSTRAINT FK_SERVICES FOREIGN KEY ( ID_SERVICES ) REFERENCES SENIORE.SERVICES( ID ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE SENIORE.REQUESTS ADD CONSTRAINT FK_REQUESTS_STATUS FOREIGN KEY ( ID_REQUESTS_STATUS ) REFERENCES SENIORE.REQUESTS_STATUS( ID ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE SENIORE.USERS_SERVICES ADD CONSTRAINT FK_USERS FOREIGN KEY ( ID_USERS ) REFERENCES SENIORE."USERS"( ID ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE SENIORE.USERS_SERVICES ADD CONSTRAINT FK_SERVICES FOREIGN KEY ( ID_SERVICES ) REFERENCES SENIORE.SERVICES( ID ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE SENIORE.USERS_SERVICES ADD CONSTRAINT FK_DEMAND_OFFER FOREIGN KEY ( ID_DEMAND_OFFER ) REFERENCES SENIORE.DEMAND_OFFER( ID ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE SENIORE.USERS_SERVICES ADD CONSTRAINT FK_ADDRESS FOREIGN KEY (  ) REFERENCES SENIORE."USERS"(  ) ON DELETE NO ACTION ON UPDATE NO ACTION;
